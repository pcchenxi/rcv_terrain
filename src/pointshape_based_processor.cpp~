#include "ros/ros.h"

#include "functions/continuity_filter.h"
#include "functions/xi_functions.h"

#include <tf/transform_listener.h>

#include <sensor_msgs/point_cloud_conversion.h>

ros::Publisher  pub_continuity, pub_cross, pub_ground, pub_costmap;
Filter_Continuity       filter_continutiy;
Filter_Cross_Section    filter_crosssection;
Filter_Histogram        filter_histogram;
Filter_Normal           filter_normal;

tf::TransformListener* tfListener = NULL;
float sensor_height = 1.0;
int point_num_h = 720;

void publish(ros::Publisher pub, pcl::PointCloud<pcl::PointXYZRGB> cloud, int type = 2)
{
    sensor_msgs::PointCloud2 pointlcoud2;
    pcl::toROSMsg(cloud, pointlcoud2);

    if(type == 2)
    {
        pub.publish(pointlcoud2);
    }
    else
    {
        sensor_msgs::PointCloud pointlcoud;
        sensor_msgs::convertPointCloud2ToPointCloud(pointlcoud2, pointlcoud);

        pointlcoud.header = pointlcoud2.header;
        pub.publish(pointlcoud);
    }

}

void seperate_velodyne_cloud(pcl::PointCloud<pcl::PointXYZRGB> cloud
                                           , pcl::PointCloud<pcl::PointXYZRGB> *velodyne_sets
                                           , Feature **feature_sets)
{
    
    float toDegree = 180/M_PI;
    
    for(int i = 0; i<cloud.points.size(); i++)
    {
        float x = cloud.points[i].x;
        float y = cloud.points[i].y;
        
        if(x < 0)
            continue;
            
        float r = sqrt(x*x + y*y);
        float h = cloud.points[i].z;
        
        if(r > 20)
            continue;
        
        double angle_v = atan2(h, r) * toDegree + 15.0;
        double angle_h = (atan2(y, x) + M_PI) * toDegree;
        
        int index_v = angle_v/2.0;
        int index_h = angle_h/0.5;
        float mod = angle_v - (index_v * 2.0);
        if(mod > 1)
            index_v += 1;

        velodyne_sets[index_v].points[index_h] = cloud.points[i];
        feature_sets[index_v][index_h].radius = r;        
    }
}


void seperate_velodyne_cloud(pcl::PointCloud<pcl::PointXYZRGB> cloud 
                           , pcl::PointCloud<pcl::PointXYZRGB> cloud_transformed
                           , pcl::PointCloud<pcl::PointXYZRGB> *velodyne_sets
                           , Feature **feature_sets)
{
    
    float toDegree = 180/M_PI;
    
    for(int i = 0; i<cloud.points.size(); i++)
    {
        float x = cloud.points[i].x;
        float y = cloud.points[i].y;
        
        if(x < 0)
            continue;
           
        float r = sqrt(x*x + y*y);
        float h = cloud.points[i].z;
                
        if(r > 20)
            continue;
        
        float x_trans = cloud_transformed.points[i].x;
        float y_trans = cloud_transformed.points[i].y;
        float r_trans = sqrt(x_trans*x_trans + y_trans*y_trans);
        
        double angle_v = atan2(h, r) * toDegree + 15.0;
        double angle_h = (atan2(y, x) + M_PI) * toDegree;
        
        int index_v = angle_v/2.0;
        int index_h = angle_h/0.5;
        float mod = angle_v - (index_v * 2.0);
        if(mod > 1)
            index_v += 1;
        
        velodyne_sets[index_v].points[index_h] = cloud_transformed.points[i];
        feature_sets[index_v][index_h].radius = r_trans;
    }
}

pcl::PointCloud<pcl::PointXYZRGB> generate_costmap_cloud(pcl::PointCloud<pcl::PointXYZRGB> cloud)
{
    pcl::PointCloud<pcl::PointXYZRGB> obs_points;
    
    for(int i = 0; i<cloud.points.size(); i++)
    {
        int r = cloud.points[i].r;
        pcl::PointXYZRGB point;
        point = cloud.points[i];

        if(r != 0 && abs(cloud.points[i].x) > 1.5 && abs(cloud.points[i].y) > 1.5)
        {
	    point.z += 3.0;
	    obs_points.points.push_back(point);
        }
	else
	{
	    point.z = 0.0;
	    obs_points.points.push_back(point);
	}
    }
    
    obs_points.header.frame_id = cloud.header.frame_id;

    return obs_points;
}

void callback_velodyne(const sensor_msgs::PointCloud2ConstPtr &cloud_in)
{
    sensor_msgs::PointCloud2 cloud_base;

    tf::StampedTransform velodyne_to_base;
    
    string target_name = "/base_link";
    //string target_name = "/odom";    

    tfListener->waitForTransform(target_name, cloud_in->header.frame_id, ros::Time::now(), ros::Duration(2.0));
    tfListener->lookupTransform(target_name, cloud_in->header.frame_id, ros::Time(0), velodyne_to_base);

    Eigen::Matrix4f eigen_transform;
    pcl_ros::transformAsMatrix (velodyne_to_base, eigen_transform);
    pcl_ros::transformPointCloud (eigen_transform, *cloud_in, cloud_base);

    cloud_base.header.frame_id = target_name;

    // initialize velodyne group space
    pcl::PointCloud<pcl::PointXYZRGB> velodyne_sets[16];
    Feature **feature_sets = new Feature*[16];
    //pcl::PointCloud<pcl::PointXYZRGB> feature_sets[16];
    for(int i = 0; i<16; i++)
    {
        velodyne_sets[i].points.resize(720);
        feature_sets[i] = new Feature[720];
        //feature_sets[i].points.resize(720);
    }
    
    for(int i = 0; i< 16; i++)
    for(int j = 0; j < 720; j++)
    {
        feature_sets[i][j].radius = 0;
        feature_sets[i][j].continuity_prob = 0;
        feature_sets[i][j].cross_section_prob = 0;
        feature_sets[i][j].sum = 0;
    }
    
    // for velodyne frame, used for point classification
    pcl::PointCloud<pcl::PointXYZ> pcl_cloud, pcl_cloud_base;
    pcl::fromROSMsg(*cloud_in, pcl_cloud);
    pcl::PointCloud<pcl::PointXYZRGB> cloud, cloud_base_rgb, cloud_inlier;
    copyPointCloud(pcl_cloud, cloud); 
    
    // for target frame, used for sending result to cost map
    pcl::fromROSMsg(cloud_base, pcl_cloud_base);
    copyPointCloud(pcl_cloud_base, cloud_base_rgb); 
    cloud_base_rgb.header.frame_id = target_name;
     
    //seperate_velodyne_cloud(cloud, velodyne_sets, feature_sets); 
    seperate_velodyne_cloud(cloud, cloud_base_rgb, velodyne_sets, feature_sets); 
     
    pcl::PointCloud<pcl::PointXYZRGB> result;
 
    
    //////////////////////////////////////////////////////////////////////////////////////////////////
    feature_sets = filter_continutiy.filtering_all_sets(velodyne_sets, feature_sets);
    
    result       = filter_continutiy.color_all_sets(velodyne_sets, feature_sets);
    //////////////////////////////////////////////////////////////////////////////////////////////////
    result.header.frame_id =  target_name;

    pcl::PointCloud<pcl::PointXYZRGB> costmap_cloud = generate_costmap_cloud(result);

    costmap_cloud.header.frame_id = target_name;
    publish(pub_ground, costmap_cloud);

}

int main(int argc, char** argv){
    ros::init(argc, argv, "pointshape_based_processor");

    ros::NodeHandle node;
    ros::Rate rate(10.0);

    ros::Subscriber sub_velodyne_right = node.subscribe<sensor_msgs::PointCloud2>("/velodyne_points_right", 1, callback_velodyne);
    ros::Subscriber sub_velodyne_left  = node.subscribe<sensor_msgs::PointCloud2>("/velodyne_points_left", 1, callback_velodyne);

    pub_continuity = node.advertise<sensor_msgs::PointCloud2>("/continuity_filtered", 1);
    pub_cross      = node.advertise<sensor_msgs::PointCloud2>("/cross_section_filtered", 1);
    pub_ground     = node.advertise<sensor_msgs::PointCloud2>("/velodyne_points_ground", 1);

    pub_costmap    = node.advertise<sensor_msgs::PointCloud>("/costmap_cloud", 1);
        

    // ros::Subscriber sub_odom = node.subscribe<geometry_msgs::PoseStamped>("/slam_out_pose", 1, callback_odom);
    // ros::Subscriber sub_odom_icp = node.subscribe<nav_msgs::Odometry >("/icp_odom", 1, callback_odom_icp);


    tfListener = new (tf::TransformListener);

    while (node.ok())
    {

        ros::spinOnce();
        rate.sleep();
    }
    return 0;
};
